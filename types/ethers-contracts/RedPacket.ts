/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface RedPacketInterface extends utils.Interface {
  functions: {
    "redPacketCounter()": FunctionFragment;
    "redPackets(uint256)": FunctionFragment;
    "createRedPacket(uint256)": FunctionFragment;
    "claimRedPacket(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "redPacketCounter"
      | "redPackets"
      | "createRedPacket"
      | "claimRedPacket"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "redPacketCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redPackets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createRedPacket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRedPacket",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "redPacketCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redPackets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createRedPacket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRedPacket",
    data: BytesLike
  ): Result;

  events: {
    "RedPacketClaimed(uint256,address,uint256)": EventFragment;
    "RedPacketCreated(uint256,address,uint256,uint256)": EventFragment;
    "RedPacketUpdated(uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RedPacketClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedPacketCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedPacketUpdated"): EventFragment;
}

export interface RedPacketClaimedEventObject {
  redPacketId: BigNumber;
  claimer: string;
  amount: BigNumber;
}
export type RedPacketClaimedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  RedPacketClaimedEventObject
>;

export type RedPacketClaimedEventFilter =
  TypedEventFilter<RedPacketClaimedEvent>;

export interface RedPacketCreatedEventObject {
  redPacketId: BigNumber;
  sender: string;
  totalAmount: BigNumber;
  totalCount: BigNumber;
}
export type RedPacketCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  RedPacketCreatedEventObject
>;

export type RedPacketCreatedEventFilter =
  TypedEventFilter<RedPacketCreatedEvent>;

export interface RedPacketUpdatedEventObject {
  redPacketId: BigNumber;
  remainAmount: BigNumber;
  remainCount: BigNumber;
}
export type RedPacketUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  RedPacketUpdatedEventObject
>;

export type RedPacketUpdatedEventFilter =
  TypedEventFilter<RedPacketUpdatedEvent>;

export interface RedPacket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RedPacketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    redPacketCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    redPackets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        sender: string;
        totalAmount: BigNumber;
        remainAmount: BigNumber;
        totalCount: BigNumber;
        remainCount: BigNumber;
        isActive: boolean;
      }
    >;

    createRedPacket(
      _totalCount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    claimRedPacket(
      redPacketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  redPacketCounter(overrides?: CallOverrides): Promise<BigNumber>;

  redPackets(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      sender: string;
      totalAmount: BigNumber;
      remainAmount: BigNumber;
      totalCount: BigNumber;
      remainCount: BigNumber;
      isActive: boolean;
    }
  >;

  createRedPacket(
    _totalCount: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  claimRedPacket(
    redPacketId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    redPacketCounter(overrides?: CallOverrides): Promise<BigNumber>;

    redPackets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        sender: string;
        totalAmount: BigNumber;
        remainAmount: BigNumber;
        totalCount: BigNumber;
        remainCount: BigNumber;
        isActive: boolean;
      }
    >;

    createRedPacket(
      _totalCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRedPacket(
      redPacketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "RedPacketClaimed(uint256,address,uint256)"(
      redPacketId?: BigNumberish | null,
      claimer?: string | null,
      amount?: null
    ): RedPacketClaimedEventFilter;
    RedPacketClaimed(
      redPacketId?: BigNumberish | null,
      claimer?: string | null,
      amount?: null
    ): RedPacketClaimedEventFilter;

    "RedPacketCreated(uint256,address,uint256,uint256)"(
      redPacketId?: BigNumberish | null,
      sender?: string | null,
      totalAmount?: null,
      totalCount?: null
    ): RedPacketCreatedEventFilter;
    RedPacketCreated(
      redPacketId?: BigNumberish | null,
      sender?: string | null,
      totalAmount?: null,
      totalCount?: null
    ): RedPacketCreatedEventFilter;

    "RedPacketUpdated(uint256,uint256,uint256)"(
      redPacketId?: BigNumberish | null,
      remainAmount?: null,
      remainCount?: null
    ): RedPacketUpdatedEventFilter;
    RedPacketUpdated(
      redPacketId?: BigNumberish | null,
      remainAmount?: null,
      remainCount?: null
    ): RedPacketUpdatedEventFilter;
  };

  estimateGas: {
    redPacketCounter(overrides?: CallOverrides): Promise<BigNumber>;

    redPackets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createRedPacket(
      _totalCount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    claimRedPacket(
      redPacketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    redPacketCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redPackets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createRedPacket(
      _totalCount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claimRedPacket(
      redPacketId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
